# backupld - A backup framework for LemonDigits.com
# Author: Joe Eaves
# Start Date: 12/03/14

# Dependencies / Setup
set -o pipefail
. cpfb
messageMacrofier() {
	echo "$(echo $@ | m4 \
		-D name="$BACKUP_NAME" \
		-D date="$TODAY_DATE" \
		-D fail_count="$FAIL_COUNT" \
		- \
	)"
}

TODAY_DATE="$(date +%Y%m%d)"
FAIL_COUNT=0
LOG="$(mktemp /tmp/backupld_XXXXX)"
parseConfig "$1" || let FAIL_COUNT+=1

# Check backup_name specials
BACKUP_NAME="$(messageMacrofier $BACKUP_NAME)"

# Logic
createBackup() {
	echo "--- [Create] Backup for $1::$2" | printMessage
	attic create --stats "$BACKUP_HOST:$1.attic::$BACKUP_NAME" "$2" --exclude .forever --exclude tmp 2>&1 | printMessage
	exitCode=$?
	if [[ $exitCode -eq 0 ]]; then
		echo "--- [Create] Completed successfully" | printMessage
		return 0
	else
		echo "--- [Create] Completed unsuccessfully" | printMessage
		let FAIL_COUNT+=1
		return 1
	fi
}

pruneBackup() {
	echo "--- [Prune] Backup for $1::$2" | printMessage
	local keeps=
	local hourly=
	local daily=
	local weekly=
	local monthly=
	[[ "${PRUNE_HOURLY[default]}" ]] && hourly="-H ${PRUNE_HOURLY[default]}"
	[[ "${PRUNE_HOURLY[$1]}" ]] && hourly="-H ${PRUNE_HOURLY[$1]}"
	[[ "${hourly: -1}" -eq 0 ]] && hourly=
	keeps="$hourly"
	[[ "${PRUNE_DAILY[default]}" ]] && daily="-d ${PRUNE_DAILY[default]}"
	[[ "${PRUNE_DAILY[$1]}" ]] && daily="-d ${PRUNE_DAILY[$1]}"
	[[ "${daily: -1}" -eq 0 ]] && daily=
	keeps="$keeps $daily"
	[[ "${PRUNE_WEEKLY[default]}" ]] && weekly="-w ${PRUNE_WEEKLY[default]}"
	[[ "${PRUNE_WEEKLY[$1]}" ]] && weekly="-w ${PRUNE_WEEKLY[$1]}"
	[[ "${weekly: -1}" -eq 0 ]] && weekly=
	keeps="$keeps $weekly"
	[[ "${PRUNE_MONTHLY[default]}" ]] && monthly="-m ${PRUNE_MONTHLY[default]}"
	[[ "${PRUNE_MONTHLY[$1]}" ]] && monthly="-m ${PRUNE_MONTHLY[$1]}"
	[[ "${monthly: -1}" -eq 0 ]] && monthly=
	keeps="$keeps $monthly"
	[[ "${PRUNE_YEARLY[default]}" ]] && yearly="-y ${PRUNE_YEARLY[default]}"
	[[ "${PRUNE_YEARLY[$1]}" ]] && yearly="-y ${PRUNE_YEARLY[$1]}"
	[[ "${yearly: -1}" -eq 0 ]] && yearly=
	keeps="$keeps $yearly"
	attic prune --stats -v "$BACKUP_HOST:$1.attic" $keeps 2>&1 | printMessage
	exitCode=$?
	if [[ $exitCode -eq 0 ]]; then
		echo "--- [Prune] Completed successfully" | printMessage
		return 0
	else
		echo "--- [Prune] Completed unsuccessfully" | printMessage
		let FAIL_COUNT+=1
		return 1
	fi
}

checkBackup() {
	echo "--- [Check $(date +%A)] Backup for $1::$2" | printMessage
	attic check "$BACKUP_HOST:$1.attic" 2>&1 | printMessage
	exitCode=$?
	if [[ $exitCode -eq 0 ]]; then
		echo "--- [Check] Completed successfully" | printMessage
		return 0
	else
		echo "--- [Check] Completed unsuccessfully" | printMessage
		let FAIL_COUNT+=1
		return 1
	fi
}

checkEncryption() {
	if [[ -n "$1" ]]; then
		export ATTIC_PASSPHRASE="$1"
		return 0
	fi
	return 1
}

runBackups() {
	echo "#### backupld - Starting ####" | printMessage
	echo -en "\n" | printMessage

	## Directory backups with Attic
	for dir in "${!LOCAL_BACKUP_DIRS[@]}"; do
		local dirPath="$(echo ${LOCAL_BACKUP_DIRS[$dir]} | awk -F';' '{print $1}')"
		if checkEncryption "$(echo ${LOCAL_BACKUP_DIRS[$dir]} | awk -F';' '{print $2}')"; then
			echo "--- ...enabled encryption..." | printMessage
		elif [[ -n "$ATTIC_PASSPHRASE" ]]; then
			export ATTIC_PASSPHRASE= # Can we use 'unset' here?
			echo "--- ...disabled encryption..." | printMessage
		fi
		if createBackup "$dir" "$dirPath"; then
			pruneBackup "$dir" "$dirPath"
			if [[ $(date +%u) -eq $BACKUP_CHECK_DAY ]]; then
				checkBackup "$dir" "$dirPath"
			fi
			echo -en "\n" | printMessage
		fi
	done

	## MySQL dumps
	for database in "${!MYSQL_DBS[@]}"; do
		echo "$database - ${MYSQL_DBS[$database]}"
	done

	if [[ "$FAIL_COUNT" -gt 0 ]]; then
		echo "#### backupld - Unuccessful ####" | printMessage
	else
		echo "#### backupld - Successful ####" | printMessage
	fi

	notifyUsers

	# Cleanup
	return $FAIL_COUNT
}

notifyUsers() {
	local user
	if [[ "$NOTIFY_TYPE" == "email" ]]; then
		for user in "${NOTIFY_USERS[@]}"; do
			notifyByEmail "$(echo $user | cut -d';' -f1)" "$(echo $user | cut -d';' -f2)"
			[[ $? -ne 0 ]] && let FAIL_COUNT+=1 && return 1
		done
	elif [[ "$NOTIFY_TYPE" == "pushover" ]]; then
		notifyByPushover
		[[ $? -ne 0 ]] && let FAIL_COUNT+=1 && return 1
	elif [[ "$NOTIFY_TYPE" == "file" ]]; then
		for user in "${NOTIFY_USERS[@]}"; do
			notifyByFile "$(echo $user | cut -d';' -f1)" "$(echo $user | cut -d';' -f2)"
			[[ $? -ne 0 ]] && let FAIL_COUNT+=1 && return 1
		done
	fi
}

notifyByEmail() {
	local subject="$BACKUP_NAME, Failure Count $FAIL_COUNT"
	local message="[backupld] Completed with failure count: $FAIL_COUNT. Log attached."
	local fromName="backupld"
	local fromAddress="backupld@$NOTIFY_FROM_DOMAIN"
	local LOGb="$(cat $LOG | base64 -w 0)"
	[[ "$NOTIFY_MESSAGE" ]] && message="$(messageMacrofier $NOTIFY_MESSAGE)"
	[[ "$NOTIFY_EMAIL_SUBJECT" ]] && subject="$(messageMacrofier $NOTIFY_EMAIL_SUBJECT)"
	if [[ "$NOTIFY_MANDRILL" ]]; then
		local tmpOut="$(mktemp /tmp/XXXXX)"
		cat > "$tmpOut" <<ENDOFOUT
{
 "key": "$NOTIFY_MANDRILL",
 "message": {
  "text": "$message",
  "subject": "$subject",
  "from_email": "$fromAddress",
  "from_name": "$fromName",
  "to": [{"name": "$1", "email": "$2"}],
  "attachments": [
   {"type": "text/plain", "name": "$(basename $LOG)", "content": "$LOGb"} \
  ]
 }
}
ENDOFOUT
		local output=$(curl -s -A 'Mandrill-Curl/1.0' \
			-d @"$tmpOut" \
			'https://mandrillapp.com/api/1.0/messages/send.json'
		)
		rm -f "$tmpOut"
		if [[ ! $output =~ \"status\"\:\"queued\" ]]; then
			echo "ERROR: Mandrill notifcation failed for: $1 <$2>." | printMessage
			echo "ERROR: $output" | printMessage
		fi
	elif [[ "$NOTIFY_MAILGUN" ]]; then
		local output=$(curl -s --user "api:$NOTIFY_MAILGUN" \
			https://api.mailgun.net/v2/"$NOTIFY_MAILGUN_API_DOMAIN"/messages \
			-F from="$fromName <$fromAddress>" \
			-F to="$1 <$2>" \
			-F subject="$subject" \
			-F text="$content" \
			-F attachment=@"$LOG" \
			-F o:tag="backupld"
		)
		if [[ ! $output =~ \"message\"\:\ \"Queued\.\ Thank\ you\.\" ]]; then
			echo "ERROR: Mailgun notifcation failed for: $1 <$2>." | printMessage
			echo "ERROR: $output" | printMessage
			let FAIL_COUNT+=1
		fi
	else
		echo "Backupld: Could not find a valid API key."
		let FAIL_COUNT+=1
	fi
}

notifyByPushover() {
	local message="$FAIL_COUNT errors occured"
	[[ "$NOTIFY_MESSAGE" ]] && message="$(messageMacrofier $NOTIFY_MESSAGE)"
	if [[ "$NOTIFY_PUSHOVER_API_KEY" ]]; then
		local apiKey="$NOTIFY_PUSHOVER_API_KEY"
		if [[ "$NOTIFY_PUSHOVER_USER_KEY" ]]; then
			local userKey="$NOTIFY_PUSHOVER_USER_KEY"
			local output=$(curl -s \
				https://api.pushover.net/1/messages.json \
				-F "token=$apiKey" \
				-F "user=$userKey" \
				-F "title=[backupld] Complete" \
				-F "message=$message" \
			)
			if [[ ! $output =~ \"status\"\:\ ?1 ]]; then
				echo "ERROR: Pushover notifcation failed." | printMessage
				echo "ERROR: $output" | printMessage
				let FAIL_COUNT+=1
			fi
		else
			echo "ERROR: No Pushover user key" | printMessage
			let FAIL_COUNT+=1
		fi
	else
		echo "ERROR: No Pushover API key" | printMessage
		let FAIL_COUNT+=1
	fi
}

notifyByFile() {
	if [[ "$2" ]]; then
		cp -f "$LOG" "$2"
		rm -rf "$LOG"
	fi
}

printMessage() {
	local message
	while read message; do
		if [[ "$NOTIFY_ECHO" == "true" ]]; then
			echo "$message"
		fi
		echo "$message" >> "$LOG"
	done
}

runBackups
